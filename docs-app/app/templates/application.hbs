{{page-title
  "ember-shiki - Embed code snippets with pretty syntax highlighting in Ember.js, powered by Shiki"
}}

{{! template-lint-disable no-inline-styles }}
<div class="fixed top-0 left-0 h-screen w-1/2 bg-black/20" />
<main
  class="relative mx-auto flex max-w-full 2xl:block 2xl:max-w-4xl"
  style="--ember-shiki-background-color: #24292e;"
>
  <Sidebar />
  <article
    class="max-w-full flex-1 bg-neutral-900 p-4 md:p-12 2xl:py-12 2xl:px-24"
  >
    <div class="mx-auto max-w-full md:max-w-lg lg:max-w-2xl 2xl:max-w-4xl">
      <h1
        id="ember-shiki"
        class="flex items-center text-5xl font-extrabold text-gray-100"
      >ember-shiki</h1>
      <p class="mt-2 text-lg font-normal italic text-gray-500">Embed code
        snippets with pretty syntax highlighting in Ember.js, powered by Shiki</p>
      <p>Ember-shiki is an addon which makes using
        <a
          href="https://github.com/shikijs/shiki"
          class="font-medium text-blue-600 underline hover:no-underline"
        >shiki</a>
        in Ember a breeze. It offers a drop-in component to get syntax
        highlighting for code. This is perfect for documentation sites (such as
        this page), blogs, or wherever you need pretty formatted code.</p>

      <ul class="list-inside list-disc space-y-1">
        <li>
          ‚úÖ TypeScript and Glint ready
        </li>
        <li>
          üßµ V2 addon format
        </li>
        <li>
          üöÄ FastBoot support
        </li>
        <li>
          üì¶ Lazy loaded packages &mdash; minimal impact on initial load
        </li>
        <li>
          #Ô∏è‚É£ Syntax highlighting for 170+ languages &mdash; including `.gjs` and
          `.gts`
        </li>
        <li>
          üé® Theme support: 29 included themes &mdash; load any external
        </li>
        <li>
          üî¢ Line number support
        </li>
        <li>
          üî§ Custom fonts &mdash; including font ligature support
        </li>
        <li>
          üìã Copy code to clipboard
        </li>
        <li>
          üè∑Ô∏è Code block naming
        </li>
        <li>
          üóÇÔ∏è Group code blocks with tabs
        </li>
        <li>
          ‚ú® Line highlighting
        </li>
        <li>
          üñåÔ∏è Stylable via CSS variables
        </li>
      </ul>

      <hr class="my-16 h-px border-0 bg-gray-700" />

      <SectionTitle @text="Getting started" />
      <SectionSubtitle @text="Installation" />

      <CodeGroup @names={{array "npm" "yarn" "pnpm"}} as |Tab|>
        <Tab @name="pnpm">
          <CodeBlock @code={{"pnpm install ember-shiki"}} @language="sh" />
        </Tab>
        <Tab @name="npm">
          <CodeBlock @code={{"npm install ember-shiki"}} @language="sh" />
        </Tab>
        <Tab @name="yarn">
          <CodeBlock @code={{"yarn add ember-shiki"}} @language="sh" />
        </Tab>
      </CodeGroup>
      <p>
        Make sure you meet the following requirements:
      </p>
      <ul class="list-inside list-disc space-y-1">
        <li>Embroider or ember-auto-import v2</li>
        <li>Ember.js v4.4 or above</li>
        <li>Node.js v16 or above</li>
      </ul>

      <SectionSubtitle @text="Usage" />

      <p>After installing the addon, the
        <InlineCode>CodeBlock</InlineCode>
        component can be used to syntax highlight a snippet. Simply pass the
        code as a string and set the language which should be used for parsing.</p>

      <div class="render-preview">
        <CodeBlock @code="console.log('hello world');" @language="js" />
      </div>
      <CodeGroup
        @names={{array "Template tag (.gjs/.gts)" "Loose mode (.hbs)"}}
        as |Tab|
      >
        <Tab @name="Template tag (.gjs/.gts)">
          <CodeBlock @code={{this.usageCode}} @language="gjs" />
        </Tab>
        <Tab @name="Loose mode (.hbs)">
          <CodeBlock @code={{this.usageCodeHbs}} @language="hbs" />
        </Tab>
      </CodeGroup>

      <SectionSubtitle @text="Glint types" />
      <p>This addon ships Glint types in a template registery. To use them in
        loose mode, register them in your global types declaration.</p>

      <CodeBlock
        @code={{this.glintTypes}}
        @language="ts"
        @name="types/global.d.ts"
        @lineHighlights={{array
          (hash start=2 type="add")
          (hash start=5 type="add")
        }}
      />

      <SectionSubtitle @text="Configure (optional)" />
      <p>By default all languages and themes are lazy loaded. Shiki loads the
        <InlineCode>nord</InlineCode>
        theme by default if no theme is specified. This docs website uses
        <InlineCode>github-dark</InlineCode>.</p>
      <p>The global defaults can be adjusted in the
        <InlineCode>environment.js</InlineCode>
        file by adding an entry for
        <InlineCode>ember-shiki</InlineCode>.</p>

      <CodeBlock
        @code={{this.setupConfigCode}}
        @language="js"
        @name="app/config/environment.js"
        @lineHighlights={{array (hash start=4 end=7 type="add")}}
      />
      <p>Shiki languages, themes, and WASM are loaded from a CDN by default. If
        you wish to change the CDN, or self-host these resources, you can set a
        custom
        <InlineCode>cdnUrl</InlineCode>
        in the environment config.</p>

      <hr class="my-16 h-px border-0 bg-gray-700" />

      <SectionTitle @text="Options" />
      <SectionSubtitle @text="Language" />
      <p>Shiki supports 170+ languages out of the box. Simply pass in the
        language identifier to the code block component to enable syntax
        highlighting for that grammar.</p>

      <div class="render-preview">
        <CodeBlock
          @code="export type foo = 'bar' | null; // For example, TypeScript!"
          @language="ts"
        />
      </div>
      <CodeBlock @code={{this.codeLanguage}} @language="hbs" />

      <SectionSubtitle @text="Theme" />

      <p>Shiki ships with 29 themes built in. These can be used out of the box.</p>

      <p>
        Select a theme to preview:
        {{#if this.shiki.isInitialized}}
          {{! template-lint-disable require-input-label }}
          <select
            {{on "change" this.changeTheme}}
            class="block w-full rounded-lg border border-gray-600 bg-gray-700 p-2.5 text-sm text-white placeholder-gray-400 focus:border-blue-500 focus:ring-blue-500"
          >
            <option disabled selected>Select a theme</option>
            {{#each this.themes as |theme|}}
              <option value="{{theme}}">{{theme}}</option>
            {{/each}}
          </select>
        {{/if}}
      </p>

      <div class="render-preview">
        <CodeBlock
          @code="const foo = (bar) => { bar === 1 };"
          @theme={{this.theme}}
          @language="js"
        />
      </div>
      <CodeBlock @code={{this.codeForTheme}} @language="hbs" />

      <SectionSubtitle @text="Code block name" />
      <p>A code block can be given a name to clarify it's purpose or type.</p>

      <div class="render-preview">
        <CodeBlock
          @code="const foo = (bar) => { bar === 1 };"
          @language="js"
          @name="example-name.js"
        />
      </div>
      <CodeBlock @code={{this.codeName}} @language="hbs" />

      <SectionSubtitle @text="Copy to clipboard" />
      <p>A copy to clipboard button is shown on hover by default. If you want to
        change this behaviour you can set the
        <InlineCode>showCopyButton</InlineCode>
        argument flag.</p>
      <div class="render-preview">
        <CodeBlock
          @code="const foo = (bar) => { bar === 1 };"
          @language="js"
          @showCopyButton={{false}}
        />
      </div>
      <CodeBlock @code={{this.copyButton}} @language="hbs" />

      <p>This default can also be changed globally by setting the
        <InlineCode>showCopyButton</InlineCode>
        flag in the environment config.</p>

      <SectionSubtitle @text="Code groups" />
      <p>Code blocks can be grouped with tabs. Every tab has it's own isolated
        code block, meaning you can mix languages, themes, or basically any
        config option.</p>
      <div class="render-preview">
        <CodeGroup @names={{array "foo-bar.css" "foo-bar.hbs"}} as |Tab|>
          <Tab @name="foo-bar.css">
            <CodeBlock @code="body { color: red; }" @language="css" />
          </Tab>
          <Tab @name="foo-bar.hbs">
            <CodeBlock @code={{"<div>Hello {{name}}</div>"}} @language="hbs" />
          </Tab>
        </CodeGroup>
      </div>
      <CodeBlock @code={{this.codeGroups}} @language="hbs" />

      <SectionSubtitle @text="Line numbers" />
      <p>Code blocks have built in support for line numbering.</p>

      <div class="render-preview">
        <CodeBlock
          @code="// Line numbers!
function foo(x, y) {
  return x + y;
}"
          @language="js"
          @showLineNumbers={{true}}
        />
      </div>
      <CodeBlock @code={{this.lineNumbersCode}} @language="hbs" />

      <p>The start line number can also be adjusted in case your snippet doesn't
        start at line 1.</p>
      <div class="render-preview">
        <CodeBlock
          @code="// Line numbers - with custom offset!
function foo(x, y) {
  return x + y;
}"
          @language="gjs"
          @showLineNumbers={{true}}
          @lineNumberStart={{12}}
        />
      </div>
      <CodeBlock @code={{this.lineNumbersCodeCustomStart}} @language="hbs" />

      <p>Line numbers are disabled by default. If you wish to enable them for
        all code blocks at once, you can set the
        <InlineCode>showLineNumbers</InlineCode>
        flag in the environment config to
        <InlineCode>true</InlineCode>.</p>

      <SectionSubtitle @text="Line highlighting" />
      <p>Specific lines, or ranged of lines, can be highlighted. A highlight
        type can be
        <InlineCode>highlight</InlineCode>,
        <InlineCode>add</InlineCode>, or
        <InlineCode>remove</InlineCode>.</p>
      <p>Here's a demonstration on a code example of the Embroider readme
        explaining how to set it up.</p>

      <div class="render-preview">
        <CodeBlock
          @code={{"module.exports = function (defaults) {
  const app = new EmberApp(defaults, {});
  return app.toTree();
  const { Webpack } = require('@embroider/webpack');
  return require('@embroider/compat').compatBuild(app, Webpack);
}"}}
          @language="js"
          @lineHighlights={{array
            (hash start=3 type="remove")
            (hash start=4 end=5 type="add")
          }}
        />
      </div>
      <CodeBlock @code={{this.lineHighlightingAddRemove}} @language="hbs" />

      <SectionSubtitle @text="Loading state" />
      <p>Shiki highlights code asynchronously. The code block component offers a
        named block to render a custom loading state. By default, the code is
        rendered without syntax highlighting to prevent scroll jumps.</p>

      <p>Besides a loading named block, there's also a callback function which
        is invoked when the rendering is complete.</p>

      <CodeBlock @code={{this.loadingState}} @language="hbs" />

      <SectionSubtitle @text="Custom fonts" />
      <p>Load any external font and set it using the CSS variable. Even fonts
        with ligature support work out of the box.</p>

      <div class="render-preview">
        <CodeBlock
          @code={{"const foo = (bar) => { bar === 1 };"}}
          @language="js"
          style="--ember-shiki-font: 'JetBrains Mono'"
        />
      </div>
      <CodeBlock @code={{this.fontLigaturesCode}} @language="hbs" />

      <p>Or even Comic Sans, if you would really like to</p>
      <div class="render-preview">
        <CodeBlock
          @code="const foo = (bar) => { bar === 1 };"
          @language="js"
          style="--ember-shiki-font: 'Comic Sans MS', 'Comic Sans'"
        />
      </div>
      <CodeBlock @code={{this.fontComicSans}} @language="hbs" />

      <hr class="my-16 h-px border-0 bg-gray-700" />

      <SectionTitle @text="Advanced" />
      <SectionSubtitle @text="Custom grammar" />

      <p>Shiki supports loading custom language grammar definitions. This can be
        useful if a new language hasn't landed in the base package yet, or if
        you want to customize the output.</p>

      <p>A great use case for this is Ember's template syntax. Ember uses
        Glimmer to render component with templates defined in a
        <InlineCode>.hbs</InlineCode>
        file. But Glimmer grammar is more extensive than handlebars. If you want
        to opt into full Glimmer syntax parsing, you can load custom Glimmer
        grammar for the
        <InlineCode>handlebars</InlineCode>
        language definition. Here's an example of how you could do it:</p>

      <CodeBlock
        @name="app/routes/application.js"
        @code={{this.loadCustomGrammar}}
        @language="js"
        @theme="Black"
      />

      {{outlet}}
    </div>
  </article>
</main>